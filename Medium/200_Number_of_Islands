class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        visited = set()

        def valid_nbs(i,j):
            return (i>=0 and j>=0) and\
            (i< len(grid) and j<len(grid[0]))\
            and ((i,j) not in visited)

        def visit_island(x,y):
            if not valid_nbs(x,y) or grid[x][y] !="1":
                visited.add((x,y))
                return 0
            else:
                visited.add((x,y))
                visit_island(x + 1, y)
                visit_island(x, y + 1)
                visit_island(x, y - 1)
                visit_island(x - 1, y)
            return 1
        
        ans = 0      
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1' and ( grid[i][j] not in visited):
                    ans +=  visit_island(i,j)
        return ans

        